stages:
  - build
  - test
  - staging
  - test_e2e
  - production

.build-docker: &build-docker
  image: ubuntu
  before_script:
    - apt-get update -y
    - apt-get install -y gnupg2
    - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
    - apt-get update -y
    - apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose
    - export DOCKER_TAG="$CI_COMMIT_SHA"
    - echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
  script:
    - docker-compose build
    - docker-compose push

.ssh-deploy: &ssh-deploy
  image: ubuntu
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - export DOCKER_TAG="$CI_COMMIT_SHA"
    - ssh -p "$SSH_PORT" "$SSH_USER:$SSH_HOST" "docker pull $DOCKER_REGISTRY:byot/frontend-web-app:$DOCKER_TAG && docker stop byot-frontend-web-app || true && docker rm byot-frontend-web-app || true && docker run -p $PORT_FRONTEND_WEB_APP:5000 -dit --name byot-frontend-web-app $DOCKER_REGISTRY:byot/frontend-web-app:$DOCKER_TAG"
    - ssh -p "$SSH_PORT" "$SSH_USER:$SSH_HOST" "docker pull $DOCKER_REGISTRY:byot/backend-main:$DOCKER_TAG && docker stop byot-backend-main || true && docker rm byot-backend-main || true && docker run -p $PORT_FRONTEND_WEB_APP:5000 -dit --name byot-backend-main $DOCKER_REGISTRY:byot/backend-main:$DOCKER_TAG"

Build staging docker:
  <<: *build-docker
  stage: build
  environment:
    name: staging
  only:
    - merge_requests
  except:
    - master

Build production docker:
  <<: *build-docker
  stage: build
  environment:
    name: production
  only:
    - master

Deploy to staging:
  <<: *ssh-deploy
  stage: staging
  environment:
    name: staging
  only:
    - develop
  except:
    - merge_requests

Deploy to production:
  <<: *ssh-deploy
  stage: production
  environment:
    name: production
  only:
    - master
  except:
    - merge_requests
  when: manual

Unit tests:
  stage: test
  before_script:
    - cd frontend
    - yarn --frozen-lockfile
    - cd ../backend
    - yarn --frozen-lockfile
    - cd ..
  script:
    # add coverage to tests?
    - cd backend
    - yarn test
    - cd ../frontend/common
    - yarn test
    - cd ../native
    - yarn test
    - cd ../web/common
    - yarn test
    - cd ../web/app
    - yarn test
  only:
    - merge_requests

E2E tests:
  stage: test_e2e
  before_script:
    - cd frontend/web/test
    - yarn --frozen-lockfile
    - cd ../../../backend
    - yarn --frozen-lockfile
    - cd ..
  script:
    - cd backend
    - yarn test:e2e
    - cd ../frontend/web/test
    - yarn test
  only:
    - merge_requests
    - develop

# This will probably go through AppCenter
# Native mobile frontend:
#   stage: spawn
#   trigger:
#     include: frontend/native-mobile/.gitlab-ci.yml
#   only:
#     changes:
#       - frontend/native-mobile/**/*
#       - frontend/common/**/*
#       - common/**/*
#       - scripts/**/*
