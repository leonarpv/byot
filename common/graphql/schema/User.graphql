enum Role {
    USER
    ADMIN
}

type User implements Entity {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime

    role: Role!
    lastLogin: DateTime

    firstName: String
    lastName: String
    fullName: String
    userName: String!
    email: String!
}

type Auth {
    token: String!
    user: User
}

input UserRegister {
    role: Role
    firstName: String
    lastName: String
    email: String!
    password: String!
    userName: String!
}

input UserLogin {
    userNameOrEmail: String!
    password: String!
}

input UserUpdateInput {
    role: Role
    firstName: String
    lastName: String
    email: String
    password: String
    passwordRepeat: String
    userName: String
}

type UserList implements List {
    meta: ListMeta!
    entries: [User!]!
}

interface UserQuery {
    allUsers(filter: FulltextFilter): UserList!
    user(id: ID!): User!
}

interface UserMutation {
    userRegister(user: UserRegister!): Auth!
    userLogin(user: UserLogin!): Auth!
    userUpdateMyself(user: UserUpdateInput!): User!
    userUpdate(id: ID!, user: UserUpdateInput!): User!
}
